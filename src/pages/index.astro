---
import Layout from "../layouts/Layout.astro";
---


<!-- CEP WA2 -->
<Layout title="CEP WA2">
    <script>
        import p5 from "p5";
        import {
            sin, cos, pi
        } from "mathjs";

        /* Types */
        type Vector = {
            x: number,
            y: number
        }

        type Scalar = {
            magnitude: number
        }

        // Compute the partial derivative of f with respect to x
        function partialDerivativeX(f: ((x, y) => number), h: number = 1e-6) {
            return (x, y) => {
                return (f(x + h, y) - f(x, y)) / h;
            }
        }

        // Compute the partial derivative of f with respect to y
        function partialDerivativeY(f: ((x, y) => number), h: number = 1e-6) {
            return (x, y) => {
                return (f(x, y + h) - f(x, y)) / h;
            }
        }

        const vectorFieldDo = (Fx, Fy): ((F: ((Fx, Fy) => Scalar | Vector)) => Scalar | Vector) => {
            return (F: (Fx, Fy) => Scalar | Vector) => {
                return F(Fx, Fy);
            }
        }

        const getCurl = (x, y): ((Fx, Fy) => Vector) => {
            return (Fx, Fy) => {
                const dFy_dx = partialDerivativeX(Fy)(x, y);
                const dFx_dy = partialDerivativeY(Fx)(x, y);
                return {
                    x: dFy_dx - dFx_dy,
                    y: 0
                }; // 2D Curl is a vector quantity
            }
        }

        const getVector = (x, y): ((Fx, Fy) => Vector) => {
            return (Fx, Fy) => {
                return {
                    x: Fx(x, y),
                    y: Fy(x, y)
                };
            }
        }

        const setup = (p: p5) => {
            p.createCanvas(p.displayWidth, p.displayHeight);
            p.background(255);
        }

        const draw = (p: p5) => {
            p.background(255);
            // Fx(x, y) => x-coord of vector field at (x, y)
            const Fx = (x, y) => {
                return sin(x+y);
            }

            // Fy(x, y) => y-coord of vector field at (x, y)
            const Fy = (x, y) => {
                return cos(x-y);
            }

            // Draw the vector field
            const vectorField = vectorFieldDo(Fx, Fy);
            for (let x = 0; x < p.width; x += 50) {
                for (let y = 0; y < p.height; y += 50) {
                    const vector = vectorField(getVector(x, y));
                    p.push();
                    p.translate(x, y);
                    p.stroke(0);
                    p.strokeWeight(2);
                    p.line(0, 0, vector.x * 20, vector.y * 20);
                    p.pop();
                }
            }
        }

        let sketch = (p: p5) => {
            p.preload = () => {

            };

            p.setup = () => {
                setup(p);
            };

            p.mouseClicked = () => {
            };

            p.draw = () => {
                draw(p);
            };
        };

        new p5(sketch, document.getElementById("sketch") as HTMLElement);
    </script>

    <div id="sketch"></div>
</Layout>
